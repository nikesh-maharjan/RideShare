//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.6.</auto-generated>
//------------------------------------------------------------------------------
using System;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using RideShare.LLBLGEN.EntityClasses;
using RideShare.LLBLGEN.TypedListClasses;
using RideShare.LLBLGEN.TypedViewClasses;

namespace RideShare.LLBLGEN
{
	/// <summary>Class which represents the DataContext for the project / group 'RideShareLLBLGEN'</summary>
	public partial class RideShareLLBLGENDataContext : DbContext
	{
		partial void OnModelCreatingComplete();
	
		/// <summary>Saves all changes made in this context to the database.</summary>
		/// <returns>The number of state entries written to the database.</returns>
		/// <remarks>This method will automatically call <see cref="M:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.DetectChanges" /> to discover any
		/// changes to entity instances before saving to the underlying database. This can be disabled via <see cref="P:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AutoDetectChangesEnabled" /></remarks>
		public override int SaveChanges()
		{
			var namesOfChangedReadOnlyEntities = this.ChangeTracker.Entries().Where(e => e.Metadata.IsReadOnly() && e.State != EntityState.Unchanged).Select(e => e.Metadata.Name).Distinct().ToList();
			if(namesOfChangedReadOnlyEntities.Any())
			{
				throw new InvalidOperationException($"Attempted to save the following read-only entitie(s): {string.Join(",", namesOfChangedReadOnlyEntities)}");
			}
			return base.SaveChanges();
		}
	
		/// <summary>Override this method to further configure the model that was discovered by convention from the entity types
		/// exposed in <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties on your derived context. The resulting model may be cached
		/// and re-used for subsequent instances of your derived context.</summary>
		/// <param name="modelBuilder">The builder being used to construct the model for this context. Databases (and other extensions) typically
		/// define extension methods on this object that allow you to configure aspects of the model that are specific
		/// to a given database.</param>
		/// <remarks>If a model is explicitly set on the options for this context (via <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)" />)
		/// then this method will not be run.</remarks>
		protected override void OnModelCreating(ModelBuilder modelBuilder)
		{
			new RideShareLLBLGENModelBuilder().BuildModel(modelBuilder);
			OnModelCreatingComplete();
		}

		/// <summary>Gets the query to fetch the typed list MyTypedList</summary>
		public IQueryable<MyTypedListTypedListRow> GetMyTypedListTypedList()
		{
			var current0 = this.TblUsers;
			var current1 = from tblUser in current0
						   join tblRideRequest in this.TblRideRequests on tblUser.UserGuid equals tblRideRequest.TblUser.UserGuid
						   join tblRide in this.TblRides on tblUser.UserGuid equals tblRide.TblUser.UserGuid
						   join tblcontact in this.Tblcontacts on tblUser.UserGuid equals tblcontact.TblUser.UserGuid
						   join tbladdress in this.Tbladdresses on tblUser.UserGuid equals tbladdress.TblUser.UserGuid
						   join tblContactType in this.TblContactTypes on tblcontact.TblContactType.ContactTypeGuid equals tblContactType.ContactTypeGuid
						   select new {tblRideRequest, tblUser, tblRide, tblcontact, tbladdress, tblContactType };
			return current1.Select(v=>new MyTypedListTypedListRow() { AddressCreateDate = v.tbladdress.AddressCreateDate, AddressGuid = v.tbladdress.AddressGuid, AddressUpdateDate = v.tbladdress.AddressUpdateDate, City = v.tbladdress.City, PostalCode = v.tbladdress.PostalCode, State = v.tbladdress.State, Street1 = v.tbladdress.Street1, Street2 = v.tbladdress.Street2, UserGuid = v.tbladdress.UserGuid, ContactCreateDate = v.tblcontact.ContactCreateDate, ContactGuid = v.tblcontact.ContactGuid, ContactType = v.tblcontact.ContactType, ContactUpdateDate = v.tblcontact.ContactUpdateDate, ContactValue = v.tblcontact.ContactValue, IsActive = v.tblcontact.IsActive, UserGuid1 = v.tblcontact.UserGuid, ContactType1 = v.tblContactType.ContactType, ContactTypeCreateDate = v.tblContactType.ContactTypeCreateDate, ContactTypeGuid = v.tblContactType.ContactTypeGuid, ContactTypeUpdateDate = v.tblContactType.ContactTypeUpdateDate, RideCreateDate = v.tblRide.RideCreateDate, RideEndAddressGuid = v.tblRide.RideEndAddressGuid, RideEndDateTime = v.tblRide.RideEndDateTime, RideFromGuid = v.tblRide.RideFromGuid, RideGuid = v.tblRide.RideGuid, RideStartAddressGuid = v.tblRide.RideStartAddressGuid, RideStartDateTime = v.tblRide.RideStartDateTime, RideToGuid = v.tblRide.RideToGuid, RideUpdateDate = v.tblRide.RideUpdateDate, RequestCreateDate = v.tblRideRequest.RequestCreateDate, RequestEndAddressGuid = v.tblRideRequest.RequestEndAddressGuid, RequestEndDateTime = v.tblRideRequest.RequestEndDateTime, RequestFromGuid = v.tblRideRequest.RequestFromGuid, RequestStartAddressGuid = v.tblRideRequest.RequestStartAddressGuid, RequestStartDateTime = v.tblRideRequest.RequestStartDateTime, RequestToGuid = v.tblRideRequest.RequestToGuid, RequestUpdateDate = v.tblRideRequest.RequestUpdateDate, RideRequestGuid = v.tblRideRequest.RideRequestGuid, EmailAddress = v.tblUser.EmailAddress, Password = v.tblUser.Password, UserCreateDate = v.tblUser.UserCreateDate, UserGuid2 = v.tblUser.UserGuid, UserName = v.tblUser.UserName, UserUpdateDate = v.tblUser.UserUpdateDate } );
		}
	

		/// <summary>Gets an object query for the entity set 'Tbladdress', containing entity type 'Tbladdress'</summary>
		public DbSet<Tbladdress> Tbladdresses { get; set; } 
		/// <summary>Gets an object query for the entity set 'Tblcontact', containing entity type 'Tblcontact'</summary>
		public DbSet<Tblcontact> Tblcontacts { get; set; } 
		/// <summary>Gets an object query for the entity set 'TblContactType', containing entity type 'TblContactType'</summary>
		public DbSet<TblContactType> TblContactTypes { get; set; } 
		/// <summary>Gets an object query for the entity set 'TblRide', containing entity type 'TblRide'</summary>
		public DbSet<TblRide> TblRides { get; set; } 
		/// <summary>Gets an object query for the entity set 'TblRideRequest', containing entity type 'TblRideRequest'</summary>
		public DbSet<TblRideRequest> TblRideRequests { get; set; } 
		/// <summary>Gets an object query for the entity set 'TblUser', containing entity type 'TblUser'</summary>
		public DbSet<TblUser> TblUsers { get; set; } 
		/// <summary>Gets an object query for the query set 'Tbladdress1', containing typed view type 'Tbladdress1'</summary>
		public DbQuery<Tbladdress1TypedViewRow> Tbladdress1s { get; set; } 
		/// <summary>Gets an object query for the query set 'Tblcontact1', containing typed view type 'Tblcontact1'</summary>
		public DbQuery<Tblcontact1TypedViewRow> Tblcontact1s { get; set; } 
		/// <summary>Gets an object query for the query set 'TblContactType1', containing typed view type 'TblContactType1'</summary>
		public DbQuery<TblContactType1TypedViewRow> TblContactType1s { get; set; } 
		/// <summary>Gets an object query for the query set 'TblRide1', containing typed view type 'TblRide1'</summary>
		public DbQuery<TblRide1TypedViewRow> TblRide1s { get; set; } 
		/// <summary>Gets an object query for the query set 'TblRideRequest1', containing typed view type 'TblRideRequest1'</summary>
		public DbQuery<TblRideRequest1TypedViewRow> TblRideRequest1s { get; set; } 
		/// <summary>Gets an object query for the query set 'TblUser1', containing typed view type 'TblUser1'</summary>
		public DbQuery<TblUser1TypedViewRow> TblUser1s { get; set; } 
	}
}
